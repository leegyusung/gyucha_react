let generateAccessToken,User;_28b‍.x([["register",()=>register],["login",()=>login],["logout",()=>logout],["getUsers",()=>getUsers]]);_28b‍.w("../../lib/jwtmiddle",[["generateAccessToken",["generateAccessToken"],function(v){generateAccessToken=v}]]);_28b‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);


const user = {
    username: "a123",
    password: "a123"
};

       const register = async (req, res) => {
    const { username, password } = req.body;
    try {
        const exist = await User.findOne({ username: username }).exec();
        if (exist) return res.status(400).send("존재하는 유저입니다");


        const user = new User({
            username: username,
            password: password
        })
        await user.save();
        return res.json(user);
    } catch (error) {
        return res.json(error);
    }
}

       const login = async (req, res) => {
    const { username, password } = req.body;
    try {
        const exist = await User.findOne({ username: username }).exec();
        if (exist) {
            const acesstoken = generateAccessToken(exist._id);
            res.cookie('user', acesstoken);

            return res.status(201).json({
                result: exist,
                acesstoken
            });
        }
        return res.status(400).send("존재하지 않는 유저입니다.");

    } catch (error) {
        return res.json(error);
    }


}

       const logout = async (req, res) => {
    try {

    } catch (error) {

    }

}

       const getUsers = async (req, res) => {
    try {
        const users = await User.find().exec();
        return res.json(users);
    } catch (error) {
        return res.json(error);
    }

}